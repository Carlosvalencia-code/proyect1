// Esquema de base de datos para Synthia Style
// PostgreSQL con Prisma ORM

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumeraciones para usuarios
enum SubscriptionTier {
  FREE
  PREMIUM
  PRO
  ENTERPRISE
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum SkinTone {
  VERY_LIGHT
  LIGHT
  LIGHT_MEDIUM
  MEDIUM
  MEDIUM_DARK
  DARK
  VERY_DARK
}

enum HairColor {
  BLONDE
  BROWN
  BLACK
  RED
  GRAY
  WHITE
  OTHER
}

enum EyeColor {
  BLUE
  GREEN
  BROWN
  HAZEL
  GRAY
  AMBER
  OTHER
}

// Modelo de usuario extendido
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  
  // Información del perfil extendido
  dateOfBirth DateTime?
  gender      String? // "male", "female", "non-binary", "prefer-not-to-say"
  location    String? // Ciudad/País opcional
  skinTone    SkinTone?
  hairColor   HairColor?
  eyeColor    EyeColor?
  
  // Sistema de roles y suscripciones
  role             UserRole         @default(USER)
  subscriptionTier SubscriptionTier @default(FREE)
  subscriptionExpiry DateTime?
  
  // Tracking de actividad
  lastActive       DateTime?
  onboardingCompleted Boolean @default(false)
  onboardingStep   Int     @default(0)
  loginCount       Int     @default(0)
  
  // Límites de uso por suscripción
  monthlyAnalysisCount    Int @default(0)
  monthlyAnalysisLimit    Int @default(5) // Límite para FREE
  lastAnalysisReset       DateTime @default(now())
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  isVerified Boolean @default(false)
  
  // Relaciones existentes
  preferences UserPreferences?
  facialAnalyses    FacialAnalysis[]
  chromaticAnalyses ChromaticAnalysis[]
  feedbacks Feedback[]
  
  // Nuevas relaciones
  profile             UserProfile?
  analytics           UserAnalytics?
  onboarding          UserOnboarding?
  subscriptionHistory SubscriptionHistory[]
  dailyUsage          DailyUsage[]
  
  // Relaciones del armario virtual
  wardrobeItems       WardrobeItem[]
  wardrobeCollections WardrobeCollection[]
  outfits             Outfit[]
  stylePreferences    StylePreference?
  shoppingRecommendations ShoppingRecommendation[]
  wardrobeAnalyses    WardrobeAnalysis[]
  outfitCalendar      OutfitCalendar[]
  
  // Relaciones del sistema de shopping
  wishlistItems       WishlistItem[]
  affiliateEarnings   AffiliateEarning[]
  purchaseTracking    PurchaseTracking[]
  priceAlerts         PriceAlert[]
  shoppingPreferences ShoppingPreference?
  
  @@map("users")
}

// Preferencias del usuario expandidas
model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Preferencias de notificaciones
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  marketingEmails       Boolean @default(false)
  analysisReminders     Boolean @default(true)
  weeklyDigest         Boolean @default(true)
  
  // Preferencias de privacidad
  shareAnalytics       Boolean @default(false)
  profileVisibility    String  @default("private") // private, public, friends
  showAnalysisHistory  Boolean @default(true)
  allowDataExport      Boolean @default(true)
  dataRetentionDays    Int     @default(365)
  
  // Preferencias de análisis
  autoSaveResults      Boolean @default(true)
  detailedRecommendations Boolean @default(true)
  includeConfidenceScore Boolean @default(true)
  preferredLanguage    String  @default("es") // es, en, fr, etc.
  
  // Preferencias de interfaz
  theme               String @default("light") // light, dark, auto
  currency            String @default("USD")
  timezone            String @default("UTC")
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_preferences")
}

// Perfil extendido del usuario
model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Información personal adicional
  bio                String?  @db.Text
  website           String?
  profession        String?
  interests         String[] // Array de intereses
  
  // Preferencias de estilo
  stylePreferences  Json? // Preferencias detalladas de estilo
  favoriteColors    String[] // Colores favoritos
  fashionGoals      String[] // Objetivos de moda
  budgetRange       String? // "low", "medium", "high", "luxury"
  
  // Información de medidas (opcional)
  height            Float? // En centímetros
  weight            Float? // En kilogramos
  bodyType          String? // "pear", "apple", "hourglass", "rectangle", "inverted-triangle"
  
  // Social media (opcional)
  instagramHandle   String?
  tiktokHandle      String?
  linkedinProfile   String?
  
  // Configuración de compartir
  allowPublicProfile Boolean @default(false)
  showStatsPublicly  Boolean @default(false)
  showRecommendationsPublicly Boolean @default(false)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_profiles")
}

// Analytics del usuario
model UserAnalytics {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Estadísticas de uso
  totalSessions         Int @default(0)
  totalTimeSpent        Int @default(0) // En minutos
  averageSessionTime    Float @default(0.0)
  
  // Análisis realizados
  totalFacialAnalyses   Int @default(0)
  totalChromaticAnalyses Int @default(0)
  mostFrequentAnalysisDay String? // "monday", "tuesday", etc.
  mostActiveHour        Int? // 0-23
  
  // Engagement
  feedbackGiven         Int @default(0)
  recommendationsShared Int @default(0)
  profileViews          Int @default(0)
  
  // Patrones de comportamiento
  preferredAnalysisType String? // "facial", "chromatic", "both"
  averageConfidenceScore Float @default(0.0)
  improvementTrend      Float @default(0.0) // Tendencia de mejora
  
  // Conversión y retención
  onboardingCompletion  Float @default(0.0) // Porcentaje de onboarding completado
  retentionScore        Float @default(0.0) // Puntuación de retención
  churnRisk            String @default("low") // "low", "medium", "high"
  
  // Datos de último período (30 días)
  recentAnalyses        Int @default(0)
  recentSessions        Int @default(0)
  recentEngagement      Float @default(0.0)
  
  // Metadatos
  lastCalculated        DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@map("user_analytics")
}

// Historial de suscripciones
model SubscriptionHistory {
  id       String @id @default(cuid())
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Detalles de la suscripción
  tier              SubscriptionTier
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean @default(true)
  
  // Información de pago
  amount            Float?
  currency          String @default("USD")
  paymentMethod     String? // "card", "paypal", "crypto", etc.
  transactionId     String?
  
  // Razón del cambio
  changeReason      String? // "upgrade", "downgrade", "cancellation", "renewal"
  previousTier      SubscriptionTier?
  
  // Metadatos
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("subscription_history")
}

// Análisis facial
model FacialAnalysis {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Imagen analizada
  imageUrl      String
  imageMetadata Json? // metadata como dimensiones, formato, etc.
  
  // Resultados del análisis
  faceShape           String // ovalado, redondo, cuadrado, etc.
  featuresHighlighted String[] // características destacadas
  confidenceLevel     Int      // 1-100
  
  // Análisis detallado
  analysisData Json // datos completos del análisis de Gemini
  
  // Recomendaciones generadas
  recommendations FacialRecommendation[]
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("facial_analyses")
}

// Recomendaciones faciales
model FacialRecommendation {
  id              String @id @default(cuid())
  facialAnalysisId String
  facialAnalysis  FacialAnalysis @relation(fields: [facialAnalysisId], references: [id], onDelete: Cascade)
  
  // Tipo de recomendación
  category    String // cortes_pelo, gafas, escotes
  
  // Detalles de la recomendación
  name        String
  description String
  explanation String
  
  // Metadatos adicionales
  metadata Json?
  
  // Puntuación de la recomendación
  score    Float?
  priority Int    @default(1)
  
  @@map("facial_recommendations")
}

// Análisis cromático
model ChromaticAnalysis {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Respuestas del quiz
  quizResponses Json
  
  // Resultados del análisis
  colorSeason     String // invierno, primavera, verano, otoño
  skinUndertone   String // frío, cálido, neutro
  confidenceLevel Int    // 1-100
  
  // Descripción de la estación
  description String?
  
  // Análisis detallado
  analysisData Json // datos completos del análisis de Gemini
  
  // Recomendaciones de color
  colorRecommendations ColorRecommendation[]
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("chromatic_analyses")
}

// Recomendaciones de color
model ColorRecommendation {
  id                 String @id @default(cuid())
  chromaticAnalysisId String
  chromaticAnalysis  ChromaticAnalysis @relation(fields: [chromaticAnalysisId], references: [id], onDelete: Cascade)
  
  // Tipo de recomendación
  type        String // primary_palette, colors_to_avoid
  
  // Detalles del color
  colorName   String
  hexCode     String
  explanation String
  
  // Metadatos adicionales
  metadata Json?
  
  // Puntuación de la recomendación
  score    Float?
  priority Int    @default(1)
  
  @@map("color_recommendations")
}

// Feedback del usuario
model Feedback {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Tipo de feedback
  category String // facial_analysis, color_analysis, general, bug_report
  
  // Contenido del feedback
  content String
  rating  Int?   // 1-5 estrellas
  
  // Contexto
  contextData Json? // datos adicionales del contexto donde se generó el feedback
  
  // Estado del feedback
  status String @default("pending") // pending, reviewed, resolved
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("feedbacks")
}

// Sesiones de usuario (para autenticación)
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  
  // Información de la sesión
  userAgent String?
  ipAddress String?
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_sessions")
}

// Logs de actividad del sistema
model ActivityLog {
  id     String @id @default(cuid())
  userId String?
  
  // Detalles de la actividad
  action      String // login, logout, facial_analysis, color_analysis, etc.
  resource    String? // recurso afectado
  description String?
  
  // Contexto adicional
  metadata Json?
  
  // Información de la request
  ipAddress String?
  userAgent String?
  
  // Estado de la operación
  status String @default("success") // success, error, warning
  
  // Metadatos
  createdAt DateTime @default(now())
  
  @@map("activity_logs")
}

// Progreso de onboarding del usuario
model UserOnboarding {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Pasos del onboarding
  welcomeCompleted        Boolean @default(false)
  profileSetupCompleted   Boolean @default(false)
  preferencesSetCompleted Boolean @default(false)
  firstAnalysisCompleted  Boolean @default(false)
  tutorialCompleted       Boolean @default(false)
  
  // Progreso específico
  currentStep            Int     @default(0)
  totalSteps            Int     @default(5)
  completionPercentage  Float   @default(0.0)
  
  // Datos de personalización
  detectedPreferences   Json? // Preferencias detectadas automáticamente
  initialStyleGoals     String[] // Objetivos iniciales de estilo
  onboardingPath        String @default("standard") // "standard", "quick", "detailed"
  
  // Timing
  startedAt             DateTime @default(now())
  completedAt           DateTime?
  lastStepCompletedAt   DateTime?
  timeToComplete        Int? // Minutos para completar onboarding
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("user_onboarding")
}

// Features y límites por tier de suscripción
model SubscriptionFeatures {
  id   String           @id @default(cuid())
  tier SubscriptionTier @unique
  
  // Límites de análisis
  monthlyAnalysisLimit    Int
  dailyAnalysisLimit      Int @default(3)
  
  // Features disponibles
  advancedRecommendations Boolean @default(false)
  personalizedTips        Boolean @default(false)
  exportResults           Boolean @default(false)
  prioritySupport         Boolean @default(false)
  customReports          Boolean @default(false)
  
  // Features de IA
  detailedAiAnalysis     Boolean @default(false)
  multiplePhotoAnalysis  Boolean @default(false)
  videoAnalysis          Boolean @default(false)
  realTimeConsultation   Boolean @default(false)
  
  // Features sociales
  publicProfile          Boolean @default(false)
  shareResults           Boolean @default(false)
  followUsers            Boolean @default(false)
  
  // Almacenamiento
  historyRetentionDays   Int @default(30)
  maxStoredAnalyses      Int @default(10)
  
  // Soporte y consultoría
  liveChatSupport        Boolean @default(false)
  phoneSupport           Boolean @default(false)
  personalStylistAccess  Boolean @default(false)
  
  // Precio (para referencia)
  monthlyPrice           Float @default(0.0)
  yearlyPrice            Float @default(0.0)
  currency               String @default("USD")
  
  // Metadatos
  isActive               Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("subscription_features")
}

// Tracking de uso diario para rate limiting
model DailyUsage {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Fecha del tracking
  date   DateTime @db.Date
  
  // Contadores de uso
  facialAnalysesCount    Int @default(0)
  chromaticAnalysesCount Int @default(0)
  totalAnalysesCount     Int @default(0)
  
  // Otras métricas diarias
  sessionsCount          Int @default(0)
  timeSpentMinutes       Int @default(0)
  featuresUsed           String[] // Lista de features utilizadas
  
  // Límites aplicados
  dailyLimitReached      Boolean @default(false)
  limitReachedAt         DateTime?
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, date])
  @@map("daily_usage")
}

// Configuraciones del sistema expandidas
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  // Descripción de la configuración
  description String?
  category    String? // ai, security, features, etc.
  
  // Configuración específica para tipos de datos
  dataType    String @default("string") // string, number, boolean, json
  isPublic    Boolean @default(false) // Si se puede exponer en API pública
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_config")
}

// =============================================================================
// MODELOS DEL ARMARIO VIRTUAL
// =============================================================================

// Enumeraciones para el armario virtual
enum ClothingCategory {
  TOPS
  BOTTOMS
  DRESSES
  OUTERWEAR
  SHOES
  ACCESSORIES
  BAGS
  JEWELRY
  UNDERWEAR
  ACTIVEWEAR
  SLEEPWEAR
  SWIMWEAR
}

enum ClothingSubcategory {
  // Tops
  T_SHIRT
  SHIRT
  BLOUSE
  TANK_TOP
  SWEATER
  HOODIE
  CARDIGAN
  BLAZER
  JACKET
  COAT
  VEST
  
  // Bottoms
  JEANS
  TROUSERS
  SHORTS
  SKIRT
  LEGGINGS
  
  // Dresses
  CASUAL_DRESS
  FORMAL_DRESS
  COCKTAIL_DRESS
  MAXI_DRESS
  MINI_DRESS
  
  // Shoes
  SNEAKERS
  BOOTS
  HEELS
  FLATS
  SANDALS
  FORMAL_SHOES
  
  // Accessories
  HAT
  SCARF
  BELT
  WATCH
  SUNGLASSES
  
  // Bags
  HANDBAG
  BACKPACK
  CLUTCH
  TOTE
  CROSSBODY
  
  // Jewelry
  EARRINGS
  NECKLACE
  BRACELET
  RING
}

enum ClothingStyle {
  CASUAL
  FORMAL
  BUSINESS
  ELEGANT
  SPORTY
  BOHEMIAN
  MINIMALIST
  VINTAGE
  TRENDY
  CLASSIC
  EDGY
  ROMANTIC
}

enum Season {
  SPRING
  SUMMER
  FALL
  WINTER
  ALL_SEASON
}

enum Occasion {
  WORK
  CASUAL
  FORMAL
  PARTY
  DATE
  VACATION
  EXERCISE
  HOME
  SPECIAL_EVENT
  TRAVEL
}

enum FitType {
  TIGHT
  FITTED
  REGULAR
  LOOSE
  OVERSIZED
}

enum OutfitStatus {
  DRAFT
  SAVED
  FAVORITE
  WORN
  SCHEDULED
}

enum WardrobeAnalysisType {
  VERSATILITY
  COLOR_HARMONY
  GAPS_ANALYSIS
  COST_PER_WEAR
  SEASONAL_DISTRIBUTION
  STYLE_ANALYSIS
}

enum RecommendationType {
  MISSING_BASIC
  COLOR_COMPLEMENT
  STYLE_UPGRADE
  SEASONAL_NEED
  OCCASION_SPECIFIC
  TREND_UPDATE
}

// Modelo principal para items del armario
model WardrobeItem {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Información básica del item
  name        String
  description String?
  brand       String?
  size        String?
  color       String // Color principal
  secondaryColors String[] // Colores secundarios como array
  
  // Categorización
  category    ClothingCategory
  subcategory ClothingSubcategory?
  style       ClothingStyle[]
  
  // Características técnicas
  material    String?
  careInstructions String?
  fitType     FitType?
  
  // Uso y versatilidad
  season      Season[]
  occasions   Occasion[]
  
  // Información de compra
  purchaseDate  DateTime?
  purchasePrice Decimal? // Precio de compra
  purchaseStore String?  // Tienda donde se compró
  
  // Métricas de uso
  timesWorn     Int @default(0)
  lastWorn      DateTime?
  costPerWear   Decimal? // Calculado automáticamente
  
  // Análisis IA
  aiAnalysis    Json? // Resultado del análisis de IA
  colorAnalysis Json? // Análisis de colores
  styleScore    Float? // Puntuación de estilo (0-100)
  versatilityScore Float? // Puntuación de versatilidad (0-100)
  
  // Imágenes y multimedia
  imageUrl      String[] // URLs de imágenes
  thumbnailUrl  String?  // Imagen en miniatura
  
  // Tags y etiquetas
  tags          String[] // Tags definidos por el usuario
  aiTags        String[] // Tags generados por IA
  
  // Estado y visibilidad
  isActive      Boolean @default(true)
  isPublic      Boolean @default(false) // Para compartir con otros usuarios
  isFavorite    Boolean @default(false)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  collections   WardrobeCollection[]
  outfitItems   OutfitItem[]
  
  @@map("wardrobe_items")
}

// Colecciones para organizar el armario (ej: "Trabajo", "Vacaciones")
model WardrobeCollection {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Información de la colección
  name        String
  description String?
  color       String? // Color para identificar la colección
  icon        String? // Icono para la colección
  
  // Configuración
  isDefault   Boolean @default(false) // Colección por defecto
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  items WardrobeItem[]
  
  @@map("wardrobe_collections")
}

// Outfits - combinaciones de prendas
model Outfit {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Información del outfit
  name        String
  description String?
  
  // Características del outfit
  style       ClothingStyle[]
  occasion    Occasion[]
  season      Season
  
  // Estado y métricas
  status      OutfitStatus @default(DRAFT)
  rating      Float?       // Calificación del usuario (0-5)
  confidence  Float?       // Confianza de la IA en la combinación (0-100)
  
  // Información de uso
  timesWorn   Int      @default(0)
  lastWorn    DateTime?
  dateCreated DateTime @default(now())
  
  // Imagen del outfit
  imageUrl    String?
  thumbnailUrl String?
  
  // Análisis del outfit
  colorHarmony    Json? // Análisis de armonía de colores
  styleCoherence  Float? // Coherencia de estilo (0-100)
  appropriateness Float? // Apropiado para la ocasión (0-100)
  
  // Tags y notas
  tags  String[]
  notes String?
  
  // Clima y contexto
  weather     String? // Clima cuando se usó
  temperature Float?  // Temperatura
  location    String? // Ubicación donde se usó
  
  // Estado
  isActive    Boolean @default(true)
  isPublic    Boolean @default(false)
  isFavorite  Boolean @default(false)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  items           OutfitItem[]
  calendarEvents  OutfitCalendar[]
  
  @@map("outfits")
}

// Relación many-to-many entre outfits e items
model OutfitItem {
  id       String @id @default(cuid())
  outfitId String
  itemId   String
  
  outfit WardrobeItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  item   Outfit       @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  
  // Información específica del item en este outfit
  layer       Int?    // Capa del item (1=interior, 2=medio, 3=exterior)
  isMain      Boolean @default(false) // Si es el item principal del outfit
  isOptional  Boolean @default(false) // Si es opcional para el outfit
  
  // Metadatos
  createdAt DateTime @default(now())
  
  @@unique([outfitId, itemId])
  @@map("outfit_items")
}

// Preferencias de estilo del usuario (para ML)
model StylePreference {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Preferencias de estilo
  preferredStyles   ClothingStyle[]
  avoidedStyles     ClothingStyle[]
  
  // Preferencias de colores
  preferredColors   String[] // Colores favoritos
  avoidedColors     String[] // Colores que evita
  
  // Preferencias de ocasiones
  primaryOccasions  Occasion[] // Ocasiones más frecuentes
  
  // Preferencias de marcas y presupuesto
  preferredBrands   String[]
  budgetRange       Json // {min: number, max: number} por categoría
  
  // Preferencias de fit y comodidad
  preferredFit      FitType[]
  comfortPriority   Float @default(5.0) // Prioridad de comodidad (0-10)
  
  // Preferencias climáticas
  preferredSeasons  Season[]
  heatTolerance     Float @default(5.0) // Tolerancia al calor (0-10)
  coldTolerance     Float @default(5.0) // Tolerancia al frío (0-10)
  
  // Configuración de recomendaciones
  adventurousness   Float @default(5.0) // Qué tan aventurero (0-10)
  brandLoyalty      Float @default(5.0) // Lealtad a marcas (0-10)
  sustainabilityImportance Float @default(5.0) // Importancia sostenibilidad (0-10)
  
  // Machine Learning Data
  interactionData   Json? // Datos de interacciones para ML
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId])
  @@map("style_preferences")
}

// Recomendaciones de compras
model ShoppingRecommendation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relación con producto (opcional para recomendaciones genéricas)
  productId String?
  product   Product? @relation("ProductRecommendations", fields: [productId], references: [id], onDelete: SetNull)
  
  // Información del item recomendado
  itemType        ClothingCategory
  itemSubtype     ClothingSubcategory?
  recommendedName String
  description     String
  
  // Razón de la recomendación
  recommendationType RecommendationType
  reason            String // Explicación detallada
  priority          Float  @default(5.0) // Prioridad (0-10)
  confidence        Float  @default(5.0) // Confianza en la recomendación (0-10)
  
  // Información del producto (puede ser override si no hay productId)
  productName     String?
  brand           String?
  color           String?
  size            String?
  price           Decimal?
  salePrice       Decimal?
  
  // Enlaces de afiliados
  affiliateLink   String?
  imageUrl        String?
  productUrl      String?
  store           String?
  
  // Métricas de valor
  estimatedUses   Int?    // Usos estimados por año
  costPerWear     Decimal? // Costo estimado por uso
  roiScore        Float?   // ROI score (0-100)
  
  // Análisis de gap
  wardrobeGap     String? // Qué gap llena en el armario
  stylistNotes    String? // Notas del sistema de IA
  
  // Estado de la recomendación
  isActive        Boolean @default(true)
  isViewed        Boolean @default(false)
  isClicked       Boolean @default(false)
  isPurchased     Boolean @default(false)
  isRejected      Boolean @default(false)
  
  // Fechas importantes
  validUntil      DateTime? // Hasta cuándo es válida
  purchasedAt     DateTime? // Cuándo se compró
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("shopping_recommendations")
}

// Análisis del armario
model WardrobeAnalysis {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Tipo de análisis
  analysisType WardrobeAnalysisType
  
  // Resultados del análisis
  results      Json  // Resultados detallados
  score        Float // Puntuación general (0-100)
  insights     String[] // Insights clave
  
  // Recomendaciones basadas en el análisis
  recommendations String[] // Lista de recomendaciones
  priorities      String[] // Prioridades de mejora
  
  // Estadísticas del armario
  totalItems      Int
  itemsByCategory Json // Distribución por categoría
  itemsByColor    Json // Distribución por color
  itemsBySeason   Json // Distribución por temporada
  
  // Métricas de valor
  totalValue      Decimal? // Valor total del armario
  averageCostPerWear Decimal? // Promedio de costo por uso
  underutilizedItems Int // Items poco utilizados
  
  // Análisis de gaps
  missingBasics   String[] // Básicos que faltan
  colorGaps       String[] // Colores faltantes
  occasionGaps    String[] // Ocasiones no cubiertas
  
  // Metadatos
  analysisDate DateTime @default(now())
  
  @@map("wardrobe_analyses")
}

// Calendario de outfits
model OutfitCalendar {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  outfitId String
  outfit   Outfit @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  
  // Información del evento
  date        DateTime
  startTime   DateTime?
  endTime     DateTime?
  title       String?
  description String?
  
  // Contexto del evento
  occasion    Occasion
  location    String?
  weather     String? // Clima esperado
  temperature Float?  // Temperatura esperada
  
  // Estado del evento
  isConfirmed Boolean @default(false)
  isWorn      Boolean @default(false)
  isCompleted Boolean @default(false)
  
  // Notas y rating
  notes       String?
  rating      Float? // Calificación después del evento (0-5)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, date, outfitId])
  @@map("outfit_calendar")
}

// =============================================================================
// SHOPPING AND AFFILIATE SYSTEM MODELS
// =============================================================================

// Productos externos de merchants
model Product {
  id String @id @default(cuid())
  
  // Información del merchant
  merchant     String  // "amazon", "zara", "asos", etc.
  externalId   String  // ID del producto en el merchant
  merchantUrl  String  // URL original del producto
  
  // Información básica del producto
  name         String
  description  String?
  brand        String?
  
  // Información de precio
  price        Decimal
  salePrice    Decimal? // Precio en oferta
  currency     String   @default("USD")
  priceHistory Json?    // Historial de precios
  
  // Información visual
  images       String[] // URLs de imágenes
  thumbnailUrl String?  // Imagen principal
  colors       String[] // Colores disponibles
  
  // Categorización
  category     ClothingCategory
  subcategory  ClothingSubcategory?
  style        ClothingStyle[]
  season       Season[]
  occasion     Occasion[]
  
  // Información de tallas y fit
  sizes        String[] // Tallas disponibles
  fitType      FitType?
  sizingNotes  String?  // Notas sobre el tallaje
  
  // Métricas de calidad
  rating       Float?   // Rating promedio (0-5)
  reviewCount  Int      @default(0)
  popularity   Float    @default(0) // Score de popularidad
  
  // Información de disponibilidad
  inStock      Boolean  @default(true)
  stockLevel   String?  // "low", "medium", "high"
  
  // Datos para recomendaciones
  tags         String[] // Tags para búsqueda
  keywords     String[] // Keywords para matching
  
  // Estado del producto
  isActive     Boolean  @default(true)
  isMonitored  Boolean  @default(false) // Si monitoreamos precio
  
  // Metadatos
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastChecked  DateTime @default(now()) // Última vez que verificamos info
  
  // Relaciones
  wishlistItems        WishlistItem[]
  recommendations      ShoppingRecommendation[] @relation("ProductRecommendations")
  affiliateEarnings    AffiliateEarning[]
  purchaseTracking     PurchaseTracking[]
  priceAlerts          PriceAlert[]
  
  @@unique([merchant, externalId])
  @@index([category, price])
  @@index([merchant, inStock])
  @@index([brand, category])
  @@map("products")
}

// Wishlist de productos
model WishlistItem {
  id        String @id @default(cuid())
  userId    String
  productId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Configuración de alertas
  priceThreshold   Decimal? // Notificar si precio baja de este valor
  notifyRestock    Boolean  @default(true)
  notifyPriceDrop  Boolean  @default(true)
  notifySale       Boolean  @default(true)
  
  // Información adicional
  priority         Int      @default(5) // Prioridad en wishlist (1-10)
  notes           String?
  targetPrice     Decimal? // Precio objetivo
  dateNeeded      DateTime? // Fecha límite para comprar
  
  // Estado
  isActive        Boolean  @default(true)
  isPurchased     Boolean  @default(false)
  purchasedAt     DateTime?
  
  // Metadatos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Ganancias por afiliados
model AffiliateEarning {
  id        String @id @default(cuid())
  userId    String
  productId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Información del merchant/programa
  merchant        String
  programId       String? // ID del programa de afiliados
  affiliateId     String? // Nuestro ID de afiliado
  
  // Información financiera
  commissionRate  Float   // Porcentaje de comisión
  saleAmount      Decimal // Monto de la venta
  commissionAmount Decimal // Comisión ganada
  currency        String  @default("USD")
  
  // Enlaces y tracking
  affiliateLink   String
  trackingCode    String? // Código de tracking del click
  referralCode    String? // Código de referido
  
  // Estado de la comisión
  status          AffiliateStatus @default(PENDING)
  paidAt          DateTime?
  paymentMethod   String?
  paymentId       String?
  
  // Información del cliente
  customerEmail   String?
  customerData    Json?   // Datos adicionales del cliente
  
  // Métricas
  clickedAt       DateTime
  purchasedAt     DateTime?
  conversionTime  Int?    // Tiempo entre click y compra (horas)
  
  // Metadatos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("affiliate_earnings")
}

// Tracking de compras y clicks
model PurchaseTracking {
  id        String @id @default(cuid())
  userId    String
  productId String?
  
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  
  // Información del tracking
  trackingId      String   @unique // ID único para este tracking
  sessionId       String?  // ID de sesión
  
  // Información del click
  clickedAt       DateTime
  clickSource     String   // "recommendations", "wishlist", "search", etc.
  affiliateLink   String?
  
  // Información de la compra (si ocurrió)
  purchased       Boolean  @default(false)
  purchasedAt     DateTime?
  purchaseAmount  Decimal?
  currency        String   @default("USD")
  
  // Información del referrer
  referrerUrl     String?
  userAgent       String?
  ipAddress       String?
  
  // Información de conversión
  conversionTime  Int?     // Tiempo hasta conversión (horas)
  
  // Metadatos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("purchase_tracking")
}

// Alertas de precio
model PriceAlert {
  id        String @id @default(cuid())
  userId    String
  productId String
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Configuración de la alerta
  targetPrice     Decimal  // Precio objetivo
  alertType       PriceAlertType
  isActive        Boolean  @default(true)
  
  // Información de notificación
  notificationSent Boolean  @default(false)
  notifiedAt      DateTime?
  triggerPrice    Decimal? // Precio que activó la alerta
  
  // Configuración de usuario
  emailNotification Boolean @default(true)
  pushNotification  Boolean @default(true)
  smsNotification   Boolean @default(false)
  
  // Metadatos
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  expiresAt       DateTime? // Cuándo expira la alerta
  
  @@unique([userId, productId, alertType])
  @@map("price_alerts")
}

// Análisis de mercado y tendencias
model MarketTrend {
  id String @id @default(cuid())
  
  // Información de la tendencia
  name        String
  description String
  category    ClothingCategory
  
  // Métricas de tendencia
  popularity  Float    // Score de popularidad (0-100)
  growth      Float    // Crecimiento % en el período
  period      String   // "week", "month", "season"
  
  // Información de colores y estilos
  trendingColors String[]
  trendingStyles ClothingStyle[]
  
  // Precios promedio
  averagePrice   Decimal?
  priceRange     Json?    // {min: number, max: number}
  
  // Información de temporada
  season         Season?
  peakMonths     String[] // Meses de mayor popularidad
  
  // Fuentes de datos
  dataSources    String[] // De dónde viene la información
  
  // Estado
  isActive       Boolean  @default(true)
  confidence     Float    // Confianza en la predicción (0-100)
  
  // Metadatos
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  validUntil     DateTime // Hasta cuándo es válida
  
  @@map("market_trends")
}

// Configuración de shopping del usuario
model ShoppingPreference {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Preferencias de merchants
  preferredMerchants String[] // Merchants favoritos
  blockedMerchants   String[] // Merchants bloqueados
  
  // Preferencias de presupuesto
  monthlyBudget      Decimal?
  maxItemPrice       Decimal?
  budgetAlerts       Boolean @default(true)
  
  // Preferencias de notificaciones
  enableRecommendations Boolean @default(true)
  enablePriceAlerts     Boolean @default(true)
  enableTrendAlerts     Boolean @default(false)
  enableSaleAlerts      Boolean @default(true)
  
  // Frecuencia de notificaciones
  notificationFrequency String @default("weekly") // "daily", "weekly", "monthly"
  maxRecommendationsPerDay Int @default(5)
  
  // Configuración de afiliados
  allowAffiliateLinks   Boolean @default(true)
  shareEarnings         Boolean @default(false) // Compartir % con el usuario
  
  // Preferencias de sostenibilidad
  preferSustainableBrands Boolean @default(false)
  preferLocalBrands       Boolean @default(false)
  avoidFastFashion        Boolean @default(false)
  
  // Configuración de privacidad
  shareShoppingData     Boolean @default(false)
  allowPersonalization  Boolean @default(true)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId])
  @@map("shopping_preferences")
}

// Nuevos enums para el sistema de shopping
enum AffiliateStatus {
  PENDING    // Esperando confirmación
  CONFIRMED  // Compra confirmada
  PAID       // Comisión pagada
  REJECTED   // Rechazada
  CANCELLED  // Cancelada
}

enum PriceAlertType {
  PRICE_DROP    // Bajó de precio
  BACK_IN_STOCK // Volvió al stock
  SALE_ALERT    // Está en oferta
  TARGET_PRICE  // Alcanzó precio objetivo
}

// Actualizar ShoppingRecommendation para referenciar Product
// Agregar relación al modelo existente

