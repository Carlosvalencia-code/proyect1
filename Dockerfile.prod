# =============================================================================
# SYNTHIA STYLE BACKEND - MULTI-STAGE PRODUCTION DOCKERFILE
# =============================================================================
# Optimizado para seguridad, performance y tamaño mínimo
# Multi-stage build para reducir attack surface y tamaño final

# =============================================================================
# STAGE 1: DEPENDENCY BUILDER
# =============================================================================
FROM python:3.11-alpine AS dependency-builder

# Metadata del builder
LABEL stage=builder
LABEL maintainer="Synthia Style Team"
LABEL description="Backend dependency builder stage"

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    postgresql-dev \
    g++ \
    && rm -rf /var/cache/apk/*

# Create virtual environment for clean dependency management
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy only requirements for dependency caching
COPY requirements.txt /tmp/requirements.txt

# Install Python dependencies in virtual environment
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# =============================================================================
# STAGE 2: APPLICATION BUILDER
# =============================================================================
FROM python:3.11-alpine AS app-builder

# Copy virtual environment from dependency builder
COPY --from=dependency-builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application source code
COPY app/ ./app/
COPY prisma/ ./prisma/
COPY scripts/ ./scripts/
COPY run.py setup.py ./

# Create application directories
RUN mkdir -p logs uploads/facial uploads/temp uploads/thumbnails

# =============================================================================
# STAGE 3: PRODUCTION RUNTIME
# =============================================================================
FROM python:3.11-alpine AS production

# Metadata for production image
LABEL name="synthia-style-backend"
LABEL version="2.0.0"
LABEL description="Synthia Style Backend - FastAPI + PostgreSQL + Redis"
LABEL maintainer="Synthia Style Team"
LABEL org.opencontainers.image.source="https://github.com/synthia-style/backend"
LABEL org.opencontainers.image.licenses="MIT"

# Install only runtime dependencies
RUN apk add --no-cache \
    postgresql-client \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S synthia && \
    adduser -S -D -H -u 1001 -h /app -s /sbin/nologin -G synthia -g synthia synthia

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=app-builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy application from builder
COPY --from=app-builder --chown=synthia:synthia /app /app

# Create and set permissions for application directories
RUN mkdir -p logs uploads/facial uploads/temp uploads/thumbnails && \
    chown -R synthia:synthia /app && \
    chmod -R 755 /app && \
    chmod -R 775 logs uploads

# Security configurations
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PATH="/opt/venv/bin:$PATH"

# Production environment variables
ENV ENVIRONMENT=production \
    DEBUG=false \
    LOG_LEVEL=INFO

# Expose application port
EXPOSE 8000

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/cache/health || exit 1

# Switch to non-root user
USER synthia

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start application with uvicorn
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1", "--loop", "uvloop", "--http", "httptools"]
